{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","magic","fetch","then","res","json","data","setState","catch","err","console","error","className","AppBar","position","Toolbar","Typography","variant","format","List","this","filter","m","name","map","index","ListItem","key","Box","width","Card","CardHeader","title","magicName","CardContent","magicDescription","magicMeta","Object","keys","args","magicMetaKey","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2WAwFeA,E,YA9Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,IAHQ,E,iFAOE,IAAD,OAClBC,MAAM,oCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,MAAOK,OAGVE,OAAM,SAACC,GACNC,QAAQC,MAAMF,Q,+BAIV,IAAD,OACP,OAAQ,yBAAKG,UAAU,OACrB,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAClB,kBAAC,IAAD,CAAQC,OAAO,SAIrB,kBAACC,EAAA,EAAD,KAEIC,KAAKpB,MAAMC,MACRoB,QAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEC,QACdF,QAAO,SAAAC,GAAC,MAAe,QAAXA,EAAEC,QACdC,KAAI,SAACF,EAAGG,GAAJ,OACH,kBAACC,EAAA,EAAD,CAAUC,IAAKF,GACb,kBAACG,EAAA,EAAD,CAAKC,MAAO,GACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAO,EAAKC,UAAUX,KAClC,kBAACY,EAAA,EAAD,KACE,2BAAI,EAAKC,iBAAiBb,IAC1B,2BAAI,EAAKc,UAAUd,e,gCAW7BrB,GACR,MAAmB,UAAfA,EAAMsB,KAAyB,eAChB,QAAftB,EAAMsB,KAAuB,aACd,UAAftB,EAAMsB,KAAyB,eAC5BtB,EAAMsB,O,gCAGLtB,GAAQ,IAAD,OACf,OAAOoC,OAAOC,KAAKrC,EAAMsC,MAAMf,KAAI,SAAAG,GAAG,OAAI,2BAAI,EAAKa,aAAab,GAAtB,KAA8B1B,EAAMsC,KAAKZ,S,mCAGxEA,GACX,MAAY,aAARA,EAA2B,YACnB,cAARA,EAA4B,kBACpB,wBAARA,EAAsC,yBACnCA,I,uCAGQ1B,GACf,MAAmB,UAAfA,EAAMsB,KAAyB,0BAChB,QAAftB,EAAMsB,KAAuB,wBACd,UAAftB,EAAMsB,KAAyB,yBAC5BtB,EAAMsB,S,GA5ECkB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM6C,c","file":"static/js/main.1791abe5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { List, ListItem, Card, CardContent, CardHeader, Box } from '@material-ui/core';\nimport Moment from 'react-moment'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      magic: [],\n    }\n  }\n\n  componentDidMount() {\n    fetch(`http://localhost:8080/date/today`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          magic: data\n        })\n      })\n      .catch((err) => {\n        console.error(err)\n      })\n  }\n\n  render() {\n    return (<div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            <Moment format=\"L\" />\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <List>\n        {\n          this.state.magic\n            .filter(m => m.name !== \"equal\")\n            .filter(m => m.name !== \"odd\")\n            .map((m, index) =>\n              <ListItem key={index}>\n                <Box width={1}>\n                  <Card>\n                    <CardHeader title={this.magicName(m)} />\n                    <CardContent>\n                      <p>{this.magicDescription(m)}</p>\n                      <p>{this.magicMeta(m)}</p>\n                    </CardContent>\n                  </Card>\n                </Box>\n              </ListItem>)\n        }\n      </List>\n    </div>\n    );\n  }\n\n  magicName(magic) {\n    if (magic.name === \"equal\") return \"Equal number\"\n    if (magic.name === \"odd\") return \"Odd number\"\n    if (magic.name === \"prime\") return \"Prime number\"\n    return magic.name\n  }\n\n  magicMeta(magic) {\n    return Object.keys(magic.args).map(key => <p>{this.magicMetaKey(key)}: {magic.args[key]}</p>)\n  }\n\n  magicMetaKey(key) {\n    if (key === \"digitSum\") return \"Digit Sum\"\n    if (key === \"dayOfYear\") return \"Day of the year\"\n    if (key === \"remainingDaysOfYear\") return \"Remaining days of year\"\n    return key\n  }\n\n  magicDescription(magic) {\n    if (magic.name === \"equal\") return \"This is an equal number\"\n    if (magic.name === \"odd\") return \"This is an odd number\"\n    if (magic.name === \"prime\") return \"This is a prime number\"\n    return magic.name\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}